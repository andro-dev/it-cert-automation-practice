#!/usr/bin/env python3

import json
import locale
import sys
from typing import List
from emails import generate, send # import from local project file

JSON_FILE = "./../car_sales.json"
REPORT_FILE = "./../cars.pdf"


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
    max_revenue = {"revenue": 0}
    most_sales = {"total_sales": -1}
    sales_per_year = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # TODO: also handle max sales
        if item["total_sales"] > most_sales["total_sales"]:
            most_sales = item
        # TODO: also handle most popular car_year
        update_sales_per_year(item, sales_per_year)

    max_year = max(sales_per_year, key=sales_per_year.get) # year with most units sold
    sales = sales_per_year[max_year] # number of units sold this year

    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        f"The {format_car(most_sales['car'])} had the most sales: {most_sales['total_sales']}",
        f"The most popular year was {max_year} with {sales} sales."
    ]

    return summary


def update_sales_per_year(item, sales_per_year):
    year = item["car"]["car_year"]
    if year in sales_per_year.keys():
        sales_per_year[year] += item["total_sales"]
    else:
        sales_per_year[year] = item["total_sales"]


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def build_additional_info(summary, format_type):
    result = ""
    for line in summary:
        if format_type == 'pdf':
            result += F'{line}<br/>'
        else:
            result += '\n'
    return result


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    json_file, report_file = get_json_and_report_file_locations(argv)

    data = load_data(json_file)
    summary = process_data(data)
    print(summary)

    # TODO: turn this into a PDF report
    title = "Sales summary for last month"
    generate_pdf_report(report_file, title, build_additional_info(summary, 'pdf' ), cars_dict_to_table(data))

    # TODO: send the PDF report as an email attachment
    message = generate("automation@example.com", "student@example.com", "Sales summary for last month",
                       build_additional_info(summary, 'email'), report_file)
    send(message)

def get_json_and_report_file_locations(argv):
    json_file = JSON_FILE
    report_file = REPORT_FILE
    if len(argv) > 1:
        json_file = argv[1]
    if len(argv) > 2:
        report_file = argv[2]

    return json_file, report_file


def generate_pdf_report(report_file, title, additional_info, table_data):
    import reports
    reports.generate(report_file, title, additional_info, table_data)


if __name__ == "__main__":
    main(sys.argv)
